// Set this to true for production
var doCache = false;

// Name our cache
var CACHE_NAME = 'my-pwa-cache-v1';

// Delete old caches that are not our current one!
self.addEventListener("activate", event => {
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys()
      .then(keyList =>
        Promise.all(keyList.map(key => {
          if (!cacheWhitelist.includes(key)) {
            console.log('Deleting cache: ' + key)
            return caches.delete(key);
          }
        }))
      )
  );
});

// The first time the user starts up the PWA, 'install' is triggered.
self.addEventListener('install', function(event) {
  if (doCache) {
    event.waitUntil(
      caches.open(CACHE_NAME)
        .then(function(cache) {
          // Get the assets manifest so we can see what our js file is named
          // This is because webpack hashes it
          fetch("asset-manifest.json")
            .then(response => {
              response.json()
            })
            .then(assets => {
              // Open a cache and cache our files
              // We want to cache the page and the main.js generated by webpack
              // We could also cache any static assets like CSS or images
              const urlsToCache = [
                "/",
                "static/css/*",
                "static/js/*",
                "static/media/*",
                "/rocket",
                "/instagram",
                assets
              ]
              cache.addAll(urlsToCache)
              console.log('cached');
            })
        })
    );
  }
});

/*
"index.html", "155081b6497ef125ecaa8f16b9947723"],
        ["static/css/main.1637c71a.css", "5d947e4d18beedad916ebca94df3f7e3"],
        ["static/js/main.327b2716.js", "a725e0a1766e24b11562a1a19eb91727"],
        ["static/media/logo.c3c93788.svg", "c3c93788a266edb02342ba82f0ad58e1"]*/

// When the webpage goes to fetch files, we intercept that request and serve up the matching files
// if we have them
self.addEventListener('fetch', function(event) {
    if (doCache) {
      event.respondWith(
          caches.match(event.request).then(function(response) {
              return response || fetch(event.request);
          })
      );
    }
});